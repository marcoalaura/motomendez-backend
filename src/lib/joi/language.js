'use strict';

// Load modules


// Declare internals

const internals = {};


exports.errors = {
  root: 'value',
  key: "El campo '{{!key}}' ",
  messages: {
    wrapArrays: true,
  },
  any: {
    unknown: 'is not allowed',
    invalid: 'contiene un valor inválido',
    empty: 'no puede ser vacio',
    required: 'es requerido',
    allowOnly: 'Debe ser uno de los {{valids}}',
    default: 'Ejecutó un error en el método predeterminado',
  },
  alternatives: {
    base: 'no coincide con ninguna de las alternativas permitidas',
    child: null,
  },
  array: {
    base: 'debe ser un arreglo',
    includes: 'en la posicion {{pos}} no corresponde con ninguno de los tipos permitidos',
    includesSingle: 'el valor de "{{!key}}" no corresponde con ninguno de los tipos permitidos',
    includesOne: 'la posición {{pos}} falla porque {{reason}}',
    includesOneSingle: 'el valor único de "{{!key}}" falla porque {{reason}}',
    includesRequiredUnknowns: 'no contiene el requerido valor(es)  {{unknownMisses}}',
    includesRequiredKnowns: 'no contiene {{knownMisses}}',
    includesRequiredBoth: 'no contiene los valores requeridos: {{knownMisses}} y {{unknownMisses}}',
    excludes: 'la posicion {{pos}} contiene un valor no válido',
    excludesSingle: 'el valor único de "{{!key}}" contiene un valor no válido',
    min: 'debe contener menor a {{limit}} elementos',
    max: 'debe contener menor o igual a {{limit}} elementos',
    length: 'debe contener {{limit}} elementos',
    ordered: 'la posicion {{pos}} falla porque {{reason}}',
    orderedLength: 'la posicion {{pos}} fails because array must contain at most {{limit}} items',
    ref: 'references "{{ref}}" which is not a positive integer',
    sparse: 'must not be a sparse array',
    unique: 'position {{pos}} contains a duplicate value',
  },
  boolean: {
    base: 'debe ser un booleano',
  },
  binary: {
    base: 'must be a buffer or a string',
    min: 'must be at least {{limit}} bytes',
    max: 'must be less than or equal to {{limit}} bytes',
    length: 'must be {{limit}} bytes',
  },
  date: {
    base: 'must be a number of milliseconds or valid date string',
    format: 'must be a string with one of the following formats {{format}}',
    strict: 'must be a valid date',
    min: 'must be larger than or equal to "{{limit}}"',
    max: 'must be less than or equal to "{{limit}}"',
    isoDate: 'must be a valid ISO 8601 date',
    timestamp: {
      javascript: 'must be a valid timestamp or number of milliseconds',
      unix: 'must be a valid timestamp or number of seconds',
    },
    ref: 'references "{{ref}}" which is not a date',
  },
  function: {
    base: 'must be a Function',
    arity: 'must have an arity of {{n}}',
    minArity: 'must have an arity greater or equal to {{n}}',
    maxArity: 'must have an arity lesser or equal to {{n}}',
    ref: 'must be a Joi reference',
  },
  lazy: {
    base: '!!schema error: lazy schema must be set',
    schema: '!!schema error: lazy schema function must return a schema',
  },
  object: {
    base: 'must be an object',
    child: '!!child "{{!child}}" fails because {{reason}}',
    min: 'must have at least {{limit}} children',
    max: 'must have less than or equal to {{limit}} children',
    length: 'must have {{limit}} children',
    allowUnknown: '!!"{{!child}}" is not allowed',
    with: '!!"{{mainWithLabel}}" missing required peer "{{peerWithLabel}}"',
    without: '!!"{{mainWithLabel}}" conflict with forbidden peer "{{peerWithLabel}}"',
    missing: 'must contain at least one of {{peersWithLabels}}',
    xor: 'contains a conflict between exclusive peers {{peersWithLabels}}',
    or: 'must contain at least one of {{peersWithLabels}}',
    and: 'contains {{presentWithLabels}} without its required peers {{missingWithLabels}}',
    nand: '!!"{{mainWithLabel}}" must not exist simultaneously with {{peersWithLabels}}',
    assert: '!!"{{ref}}" validation failed because "{{ref}}" failed to {{message}}',
    rename: {
      multiple: 'cannot rename child "{{from}}" because multiple renames are disabled and another key was already renamed to "{{to}}"',
      override: 'cannot rename child "{{from}}" because override is disabled and target "{{to}}" exists',
    },
    type: 'must be an instance of "{{type}}"',
    schema: 'must be a Joi instance',
  },
  number: {
    base: 'must be a number',
    min: 'must be larger than or equal to {{limit}}',
    max: 'must be less than or equal to {{limit}}',
    less: 'must be less than {{limit}}',
    greater: 'must be greater than {{limit}}',
    float: 'must be a float or double',
    integer: 'must be an integer',
    negative: 'must be a negative number',
    positive: 'must be a positive number',
    precision: 'must have no more than {{limit}} decimal places',
    ref: 'references "{{ref}}" which is not a number',
    multiple: 'must be a multiple of {{multiple}}',
  },
  string: {
    base: 'must be a string',
    min: 'length must be at least {{limit}} characters long',
    max: 'length must be less than or equal to {{limit}} characters long',
    length: 'length must be {{limit}} characters long',
    alphanum: 'must only contain alpha-numeric characters',
    token: 'must only contain alpha-numeric and underscore characters',
    regex: {
      base: 'with value "{{!value}}" fails to match the required pattern: {{pattern}}',
      name: 'with value "{{!value}}" fails to match the {{name}} pattern',
      invert: {
        base: 'with value "{{!value}}" matches the inverted pattern: {{pattern}}',
        name: 'with value "{{!value}}" matches the inverted {{name}} pattern',
      },
    },
    email: 'must be a valid email',
    uri: 'must be a valid uri',
    uriRelativeOnly: 'must be a valid relative uri',
    uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',
    isoDate: 'must be a valid ISO 8601 date',
    guid: 'must be a valid GUID',
    hex: 'must only contain hexadecimal characters',
    base64: 'must be a valid base64 string',
    hostname: 'must be a valid hostname',
    lowercase: 'must only contain lowercase characters',
    uppercase: 'must only contain uppercase characters',
    trim: 'must not have leading or trailing whitespace',
    creditCard: 'must be a credit card',
    ref: 'references "{{ref}}" which is not a number',
    ip: 'must be a valid ip address with a {{cidr}} CIDR',
    ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR',
  },
};
